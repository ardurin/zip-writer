use crate::{Compression, DateTime, Writer};
use std::io::Write;

const NO_ENTRIES: &[u8] = &[
	0x50, 0x4B, 0x05, 0x06, //
	0x00, 0x00, //
	0x00, 0x00, //
	0x00, 0x00, //
	0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00,
];

const ONE_ENTRY: &[u8] = &[
	0x50, 0x4B, 0x03, 0x04, //
	0x14, 0x00, //
	0b00001000, 0b00001000, //
	0x00, 0x00, //
	0x00, 0x00, //
	0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x05, 0x00, //
	0x00, 0x00, //
	b'1', b'.', b't', b'x', b't', //
	b'S', b'o', b'm', b'e', b' ', b'd', b'a', b't', b'a', b'\n', //
	0xC9, 0xFA, 0x5C, 0x87, //
	0x0A, 0x00, 0x00, 0x00, //
	0x0A, 0x00, 0x00, 0x00, //
	0x50, 0x4B, 0x01, 0x02, //
	0x00, 0x00, //
	0x14, 0x00, //
	0b00001000, 0b00001000, //
	0x00, 0x00, //
	0x00, 0x00, //
	0x00, 0x00, //
	0xC9, 0xFA, 0x5C, 0x87, //
	0x0A, 0x00, 0x00, 0x00, //
	0x0A, 0x00, 0x00, 0x00, //
	0x05, 0x00, //
	0x00, 0x00, //
	0x00, 0x00, //
	0x00, 0x00, //
	0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	b'1', b'.', b't', b'x', b't', //
	0x50, 0x4B, 0x05, 0x06, //
	0x00, 0x00, //
	0x00, 0x00, //
	0x01, 0x00, //
	0x01, 0x00, //
	0x33, 0x00, 0x00, 0x00, //
	0x39, 0x00, 0x00, 0x00, //
	0x00, 0x00,
];

const TWO_ENTRIES: &[u8] = &[
	0x50, 0x4B, 0x03, 0x04, //
	0x14, 0x00, //
	0b00001000, 0b00001000, //
	0x00, 0x00, //
	0x00, 0x00, //
	0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x05, 0x00, //
	0x00, 0x00, //
	b'1', b'.', b't', b'x', b't', //
	b'S', b'o', b'm', b'e', b' ', b'd', b'a', b't', b'a', b'\n', //
	0xC9, 0xFA, 0x5C, 0x87, //
	0x0A, 0x00, 0x00, 0x00, //
	0x0A, 0x00, 0x00, 0x00, //
	0x50, 0x4B, 0x03, 0x04, //
	0x14, 0x00, //
	0b00001000, 0b00001000, //
	0x00, 0x00, //
	0x00, 0x00, //
	0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x05, 0x00, //
	0x00, 0x00, //
	b'2', b'.', b't', b'x', b't', //
	b'S', b'o', b'm', b'e', b' ', b'm', b'o', b'r', b'e', b' ', b'd', b'a', b't', b'a',
	b'\n', //
	0x2F, 0x9B, 0xBB, 0x5A, //
	0x0F, 0x00, 0x00, 0x00, //
	0x0F, 0x00, 0x00, 0x00, //
	0x50, 0x4B, 0x01, 0x02, //
	0x00, 0x00, //
	0x14, 0x00, //
	0b00001000, 0b00001000, //
	0x00, 0x00, //
	0x00, 0x00, //
	0x00, 0x00, //
	0xC9, 0xFA, 0x5C, 0x87, //
	0x0A, 0x00, 0x00, 0x00, //
	0x0A, 0x00, 0x00, 0x00, //
	0x05, 0x00, //
	0x00, 0x00, //
	0x00, 0x00, //
	0x00, 0x00, //
	0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	b'1', b'.', b't', b'x', b't', //
	0x50, 0x4B, 0x01, 0x02, // hasta aqu√≠
	0x00, 0x00, //
	0x14, 0x00, //
	0b00001000, 0b00001000, //
	0x00, 0x00, //
	0x00, 0x00, //
	0x00, 0x00, //
	0x2F, 0x9B, 0xBB, 0x5A, //
	0x0F, 0x00, 0x00, 0x00, //
	0x0F, 0x00, 0x00, 0x00, //
	0x05, 0x00, //
	0x00, 0x00, //
	0x00, 0x00, //
	0x00, 0x00, //
	0x00, 0x00, //
	0x00, 0x00, 0x00, 0x00, //
	0x39, 0x00, 0x00, 0x00, //
	b'2', b'.', b't', b'x', b't', //
	0x50, 0x4B, 0x05, 0x06, //
	0x00, 0x00, //
	0x00, 0x00, //
	0x02, 0x00, //
	0x02, 0x00, //
	0x66, 0x00, 0x00, 0x00, //
	0x77, 0x00, 0x00, 0x00, //
	0x00, 0x00,
];

#[test]
fn no_entries() {
	let mut data = Vec::new();
	let mut writer = Writer::new(&mut data);
	assert!(writer.finish().is_ok());
	assert_eq!(data, NO_ENTRIES);
}

#[test]
fn one_entry() {
	let mut data = Vec::new();
	let mut writer = Writer::new(&mut data);
	assert!(writer.create_entry("1.txt", Compression::None, DateTime::default()).is_ok());
	assert!(writer.write_all(b"Some data\n").is_ok());
	assert!(writer.finish().is_ok());
	assert_eq!(data, ONE_ENTRY);
}

#[test]
fn two_entries() {
	let mut data = Vec::new();
	let mut writer = Writer::new(&mut data);
	assert!(writer.create_entry("1.txt", Compression::None, DateTime::default()).is_ok());
	assert!(writer.write_all(b"Some data\n").is_ok());
	assert!(writer.create_entry("2.txt", Compression::None, DateTime::default()).is_ok());
	assert!(writer.write_all(b"Some more data\n").is_ok());
	assert!(writer.finish().is_ok());
	assert_eq!(data, TWO_ENTRIES);
}
